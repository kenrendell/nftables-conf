#!/usr/bin/nft --file

flush ruleset

table inet filter {
	set icmp_host_limit { type ipv4_addr; flags dynamic; timeout 5s; size 65536; }
	set bad_icmp_host { type ipv4_addr; flags dynamic; timeout 1m; size 131072; }

	set igmp_host_limit { type ipv4_addr; flags dynamic; timeout 5s; size 65536; }
	set bad_igmp_host { type ipv4_addr; flags dynamic; timeout 1m; size 131072; }

	set icmpv6_host_limit { type ipv6_addr; flags dynamic; timeout 5s; size 65536; }
	set bad_icmpv6_host { type ipv6_addr; flags dynamic; timeout 1m; size 131072; }

	set tcp_port {
		comment "allowed TCP ports"
		type inet_service; flags interval;
		elements = { 22 }
	}

	set udp_port {
		comment "allowed UDP ports"
		type inet_service; flags interval;
	}

	chain icmp_limit {
		update @icmp_host_limit { ip saddr limit rate over 5/second burst 5 packets } add @bad_icmp_host { ip saddr } counter drop
		limit rate over 100/second burst 5 packets counter drop
	}

	chain igmp_limit {
		update @igmp_host_limit { ip saddr limit rate over 5/second burst 5 packets } add @bad_igmp_host { ip saddr } counter drop
		limit rate over 100/second burst 5 packets counter drop
	}

	chain icmpv6_limit {
		update @icmpv6_host_limit { ip6 saddr limit rate over 5/second burst 5 packets } add @bad_icmpv6_host { ip6 saddr } counter drop
		limit rate over 100/second burst 5 packets counter drop
	}

	chain prerouting {
		type filter hook prerouting priority raw; policy accept;
		tcp dport @tcp_port tcp flags syn notrack counter comment "do not track TCP-SYN packets"
		meta l4proto icmp ip saddr @bad_icmp_host counter drop comment "drop ICMP packets from malicious IP address"
		meta l4proto igmp ip saddr @bad_igmp_host counter drop comment "drop IGMP packets from malicious IP address"
		meta l4proto ipv6-icmp ip6 saddr @bad_icmpv6_host counter drop comment "drop IPv6-ICMP packets from malicious IP address"
		counter comment "count accepted packets"
	}

	chain input {
		type filter hook input priority filter; policy drop;

		tcp dport @tcp_port ct state { invalid, untracked } synproxy mss 1460 wscale 7 timestamp sack-perm counter comment "send invalid and untracked TCP packets to Synproxy"
		ct state invalid counter drop comment "drop invalid packets"

		iiftype loopback counter accept comment "accept packets from loopback interface"

		meta l4proto icmp ct direction original counter jump icmp_limit comment "limit non-reply ICMP packets"
		meta l4proto igmp ct direction original counter jump igmp_limit comment "limit non-reply IGMP packets"
		meta l4proto ipv6-icmp ct direction original counter jump icmpv6_limit comment "limit non-reply IPv6-ICMP packets"

		ct state { established, related } counter accept comment "accept tracked connections"

		meta l4proto { icmp, igmp, ipv6-icmp } counter accept comment "accept ICMP, IGMP, and IPv6-ICMP packets"

		udp dport @udp_port counter accept comment "accept UDP packets to specified ports"

		limit rate 10/second burst 5 packets counter reject with icmpx admin-prohibited
		counter comment "count dropped packets"
	}

	chain forward {
		type filter hook forward priority raw; policy drop;
		limit rate 10/second burst 5 packets counter reject with icmpx admin-prohibited
		counter comment "count dropped packets"
	}

	chain output {
		type filter hook output priority raw; policy accept;
		counter comment "count accepted packets"
	}
}

table inet ingress_filter {
	set ipv6_bogons { # Do not edit this set
		comment "reserved and unallocated IPv6 addresses"
		type ipv6_addr; flags interval;
	}

	set ipv4_bogons { # Do not edit this set
		comment "reserved and unallocated IPv4 addresses"
		type ipv4_addr; flags interval;
	}

	set allowed_ipv6_bogons {
		type ipv6_addr; flags interval;
	}

	set allowed_ipv4_bogons {
		type ipv4_addr; flags interval;
	}

	chain ipv6_bogons_filter {
		ip6 saddr @allowed_ipv6_bogons counter accept
		ip6 saddr @ipv6_bogons counter drop
	}

	chain ipv4_bogons_filter {
		ip saddr @allowed_ipv4_bogons counter accept
		ip saddr @ipv4_bogons counter drop
	}

	chain filter {
		meta nfproto vmap { ipv6: jump ipv6_bogons_filter, ipv4: jump ipv4_bogons_filter }
	}

	#chain dev0 { type filter hook ingress device $ethernet priority filter; policy accept; goto filter; }
	#chain dev1 { type filter hook ingress device $wlan priority filter; policy accept; goto filter; }
}
